# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import chat_pb2 as chat__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in chat_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ChatServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckVersion = channel.unary_unary(
                '/ChatService/CheckVersion',
                request_serializer=chat__pb2.Version.SerializeToString,
                response_deserializer=chat__pb2.VersionResponse.FromString,
                _registered_method=True)
        self.Register = channel.unary_unary(
                '/ChatService/Register',
                request_serializer=chat__pb2.RegisterRequest.SerializeToString,
                response_deserializer=chat__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/ChatService/Login',
                request_serializer=chat__pb2.LoginRequest.SerializeToString,
                response_deserializer=chat__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.ListUsers = channel.unary_unary(
                '/ChatService/ListUsers',
                request_serializer=chat__pb2.ListUsersRequest.SerializeToString,
                response_deserializer=chat__pb2.ListUsersResponse.FromString,
                _registered_method=True)
        self.SendMessage = channel.unary_unary(
                '/ChatService/SendMessage',
                request_serializer=chat__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=chat__pb2.SendMessageResponse.FromString,
                _registered_method=True)
        self.Subscribe = channel.unary_stream(
                '/ChatService/Subscribe',
                request_serializer=chat__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=chat__pb2.Message.FromString,
                _registered_method=True)
        self.MarkRead = channel.unary_unary(
                '/ChatService/MarkRead',
                request_serializer=chat__pb2.MarkReadRequest.SerializeToString,
                response_deserializer=chat__pb2.MarkReadResponse.FromString,
                _registered_method=True)
        self.DeleteUnreadMessage = channel.unary_unary(
                '/ChatService/DeleteUnreadMessage',
                request_serializer=chat__pb2.DeleteUnreadMessageRequest.SerializeToString,
                response_deserializer=chat__pb2.DeleteUnreadMessageResponse.FromString,
                _registered_method=True)
        self.ReceiveMessages = channel.unary_unary(
                '/ChatService/ReceiveMessages',
                request_serializer=chat__pb2.ReceiveMessagesRequest.SerializeToString,
                response_deserializer=chat__pb2.ReceiveMessagesResponse.FromString,
                _registered_method=True)
        self.DeleteAccount = channel.unary_unary(
                '/ChatService/DeleteAccount',
                request_serializer=chat__pb2.DeleteAccountRequest.SerializeToString,
                response_deserializer=chat__pb2.DeleteAccountResponse.FromString,
                _registered_method=True)
        self.Logout = channel.unary_unary(
                '/ChatService/Logout',
                request_serializer=chat__pb2.LogoutRequest.SerializeToString,
                response_deserializer=chat__pb2.LogoutResponse.FromString,
                _registered_method=True)


class ChatServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CheckVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarkRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUnreadMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CheckVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckVersion,
                    request_deserializer=chat__pb2.Version.FromString,
                    response_serializer=chat__pb2.VersionResponse.SerializeToString,
            ),
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=chat__pb2.RegisterRequest.FromString,
                    response_serializer=chat__pb2.RegisterResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=chat__pb2.LoginRequest.FromString,
                    response_serializer=chat__pb2.LoginResponse.SerializeToString,
            ),
            'ListUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUsers,
                    request_deserializer=chat__pb2.ListUsersRequest.FromString,
                    response_serializer=chat__pb2.ListUsersResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=chat__pb2.SendMessageRequest.FromString,
                    response_serializer=chat__pb2.SendMessageResponse.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=chat__pb2.SubscribeRequest.FromString,
                    response_serializer=chat__pb2.Message.SerializeToString,
            ),
            'MarkRead': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkRead,
                    request_deserializer=chat__pb2.MarkReadRequest.FromString,
                    response_serializer=chat__pb2.MarkReadResponse.SerializeToString,
            ),
            'DeleteUnreadMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUnreadMessage,
                    request_deserializer=chat__pb2.DeleteUnreadMessageRequest.FromString,
                    response_serializer=chat__pb2.DeleteUnreadMessageResponse.SerializeToString,
            ),
            'ReceiveMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveMessages,
                    request_deserializer=chat__pb2.ReceiveMessagesRequest.FromString,
                    response_serializer=chat__pb2.ReceiveMessagesResponse.SerializeToString,
            ),
            'DeleteAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAccount,
                    request_deserializer=chat__pb2.DeleteAccountRequest.FromString,
                    response_serializer=chat__pb2.DeleteAccountResponse.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=chat__pb2.LogoutRequest.FromString,
                    response_serializer=chat__pb2.LogoutResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ChatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ChatService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChatService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CheckVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ChatService/CheckVersion',
            chat__pb2.Version.SerializeToString,
            chat__pb2.VersionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ChatService/Register',
            chat__pb2.RegisterRequest.SerializeToString,
            chat__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ChatService/Login',
            chat__pb2.LoginRequest.SerializeToString,
            chat__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ChatService/ListUsers',
            chat__pb2.ListUsersRequest.SerializeToString,
            chat__pb2.ListUsersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ChatService/SendMessage',
            chat__pb2.SendMessageRequest.SerializeToString,
            chat__pb2.SendMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/ChatService/Subscribe',
            chat__pb2.SubscribeRequest.SerializeToString,
            chat__pb2.Message.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MarkRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ChatService/MarkRead',
            chat__pb2.MarkReadRequest.SerializeToString,
            chat__pb2.MarkReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteUnreadMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ChatService/DeleteUnreadMessage',
            chat__pb2.DeleteUnreadMessageRequest.SerializeToString,
            chat__pb2.DeleteUnreadMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReceiveMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ChatService/ReceiveMessages',
            chat__pb2.ReceiveMessagesRequest.SerializeToString,
            chat__pb2.ReceiveMessagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ChatService/DeleteAccount',
            chat__pb2.DeleteAccountRequest.SerializeToString,
            chat__pb2.DeleteAccountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ChatService/Logout',
            chat__pb2.LogoutRequest.SerializeToString,
            chat__pb2.LogoutResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ReplicationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReplicateMessage = channel.unary_unary(
                '/ReplicationService/ReplicateMessage',
                request_serializer=chat__pb2.ReplicateMessageRequest.SerializeToString,
                response_deserializer=chat__pb2.ReplicateMessageResponse.FromString,
                _registered_method=True)
        self.ReplicateRegister = channel.unary_unary(
                '/ReplicationService/ReplicateRegister',
                request_serializer=chat__pb2.ReplicateRegisterRequest.SerializeToString,
                response_deserializer=chat__pb2.ReplicateRegisterResponse.FromString,
                _registered_method=True)
        self.ReplicateMarkRead = channel.unary_unary(
                '/ReplicationService/ReplicateMarkRead',
                request_serializer=chat__pb2.ReplicateMarkReadRequest.SerializeToString,
                response_deserializer=chat__pb2.ReplicateMarkReadResponse.FromString,
                _registered_method=True)
        self.ReplicateDeleteMessage = channel.unary_unary(
                '/ReplicationService/ReplicateDeleteMessage',
                request_serializer=chat__pb2.ReplicateDeleteMessageRequest.SerializeToString,
                response_deserializer=chat__pb2.ReplicateDeleteMessageResponse.FromString,
                _registered_method=True)
        self.ReplicateDeleteAccount = channel.unary_unary(
                '/ReplicationService/ReplicateDeleteAccount',
                request_serializer=chat__pb2.ReplicateDeleteAccountRequest.SerializeToString,
                response_deserializer=chat__pb2.ReplicateDeleteAccountResponse.FromString,
                _registered_method=True)
        self.ReplicateSubscribe = channel.unary_unary(
                '/ReplicationService/ReplicateSubscribe',
                request_serializer=chat__pb2.ReplicateSubscribeRequest.SerializeToString,
                response_deserializer=chat__pb2.ReplicateSubscribeResponse.FromString,
                _registered_method=True)


class ReplicationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReplicateMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicateRegister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicateMarkRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicateDeleteMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicateDeleteAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicateSubscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReplicationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReplicateMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateMessage,
                    request_deserializer=chat__pb2.ReplicateMessageRequest.FromString,
                    response_serializer=chat__pb2.ReplicateMessageResponse.SerializeToString,
            ),
            'ReplicateRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateRegister,
                    request_deserializer=chat__pb2.ReplicateRegisterRequest.FromString,
                    response_serializer=chat__pb2.ReplicateRegisterResponse.SerializeToString,
            ),
            'ReplicateMarkRead': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateMarkRead,
                    request_deserializer=chat__pb2.ReplicateMarkReadRequest.FromString,
                    response_serializer=chat__pb2.ReplicateMarkReadResponse.SerializeToString,
            ),
            'ReplicateDeleteMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateDeleteMessage,
                    request_deserializer=chat__pb2.ReplicateDeleteMessageRequest.FromString,
                    response_serializer=chat__pb2.ReplicateDeleteMessageResponse.SerializeToString,
            ),
            'ReplicateDeleteAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateDeleteAccount,
                    request_deserializer=chat__pb2.ReplicateDeleteAccountRequest.FromString,
                    response_serializer=chat__pb2.ReplicateDeleteAccountResponse.SerializeToString,
            ),
            'ReplicateSubscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateSubscribe,
                    request_deserializer=chat__pb2.ReplicateSubscribeRequest.FromString,
                    response_serializer=chat__pb2.ReplicateSubscribeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ReplicationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ReplicationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ReplicationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReplicateMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ReplicationService/ReplicateMessage',
            chat__pb2.ReplicateMessageRequest.SerializeToString,
            chat__pb2.ReplicateMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplicateRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ReplicationService/ReplicateRegister',
            chat__pb2.ReplicateRegisterRequest.SerializeToString,
            chat__pb2.ReplicateRegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplicateMarkRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ReplicationService/ReplicateMarkRead',
            chat__pb2.ReplicateMarkReadRequest.SerializeToString,
            chat__pb2.ReplicateMarkReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplicateDeleteMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ReplicationService/ReplicateDeleteMessage',
            chat__pb2.ReplicateDeleteMessageRequest.SerializeToString,
            chat__pb2.ReplicateDeleteMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplicateDeleteAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ReplicationService/ReplicateDeleteAccount',
            chat__pb2.ReplicateDeleteAccountRequest.SerializeToString,
            chat__pb2.ReplicateDeleteAccountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplicateSubscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ReplicationService/ReplicateSubscribe',
            chat__pb2.ReplicateSubscribeRequest.SerializeToString,
            chat__pb2.ReplicateSubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class HealthStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/Health/Ping',
                request_serializer=chat__pb2.PingRequest.SerializeToString,
                response_deserializer=chat__pb2.PingResponse.FromString,
                _registered_method=True)


class HealthServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HealthServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=chat__pb2.PingRequest.FromString,
                    response_serializer=chat__pb2.PingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Health', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Health', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Health(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Health/Ping',
            chat__pb2.PingRequest.SerializeToString,
            chat__pb2.PingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
